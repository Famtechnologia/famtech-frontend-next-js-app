import apiClient, { API_URL } from "../api/croplivestock";

// Base URLs for the new endpoints
const CROP_BASE_URL = `${API_URL}/api/crop-record`;
const LIVESTOCK_BASE_URL = `${API_URL}/api/livestock-record`;

// --- NEW TYPE: Structure for an Image Object in the Response Array ---
export interface RecordImage {
Â  Â  url: string;
Â  Â  fileId: string;
Â  Â  _id: string; // The database ID for the image entry
}

// --- Crop Record Types ---
export interface CropRecord {
Â  Â  userId: string; 
Â  Â  cropName: string;
Â  Â  variety: string;
Â  Â  location: string;
Â  Â  plantingDate: Date;
Â  Â  expectedHarvestDate: Date;
Â  Â  currentGrowthStage: string;
Â  Â  healthStatus: 'good' | 'excellent' | 'fair' | 'poor';
Â  Â  area: { value: number; unit: string };
Â  Â  seedQuantity: { value: number; unit: string };
Â  Â  note: string;
Â  Â  cropImages: RecordImage[]; 
Â  Â  _id: string; 
Â  Â  id: string; 
Â  Â  createdAt: string;
Â  Â  updatedAt: string;
Â  Â  __v: number; 
}

// --- Livestock Record Types (MUST BE EXPORTED) ---
export interface LivestockRecord {
Â  Â  userId: string; 
Â  Â  specie: string;
Â  Â  numberOfAnimal: number;
Â  Â  ageGroup: string;
Â  Â  acquisitionDate: Date;
Â  Â  breed: string;
Â  Â  healthStatus: 'good' | 'excellent' | 'fair' | 'poor';
Â  Â  feedSchedule?: string;
Â  Â  livestockImages: RecordImage[]; 
Â  Â  note?: string; 
Â  Â  _id: string; 
Â  Â  id: string;
Â  Â  createdAt: string;
Â  Â  updatedAt: string;
Â  Â  __v: number;
}

// Interfaces for API responses that include a message
export interface ApiResponse {
Â  Â  message: string;
}

// Interface for a response when adding images
export interface ImageResponse extends ApiResponse {
Â  Â  record: CropRecord | LivestockRecord; 
}

// === UPDATE PAYLOADS (MUST BE EXPORTED) ===

export interface UpdateCropPayload {
Â  Â  cropName: string;
Â  Â  variety: string;
Â  Â  location: string;
Â  Â  plantingDate: string;
Â  Â  expectedHarvestDate: string;
Â  Â  currentGrowthStage: string;
Â  Â  healthStatus: 'good' | 'excellent' | 'fair' | 'poor';
Â  Â  area: {
Â  Â  Â  Â  value: number;
Â  Â  Â  Â  unit: string;
Â  Â  };
Â  Â  seedQuantity: {
Â  Â  Â  Â  value: number;
Â  Â  Â  Â  unit: string;
Â  Â  };
Â  Â  note: string;
}

// ðŸš€ CORRECTION: HealthStatus should be the literal type, not 'string'
export interface UpdateLivestockPayload {
Â  Â  specie: string;
Â  Â  numberOfAnimal: number;
Â  Â  ageGroup: string;
Â  Â  acquisitionDate: string;
Â  Â  breed: string;
Â  Â  healthStatus: 'good' | 'excellent' | 'fair' | 'poor'; 
Â  Â  feedSchedule?: string;
Â  Â  note?: string;
}

// --- Crop Record API Functions ---

export const getCropRecords = async (id: string): Promise<CropRecord[]> => {
Â  Â  const response = await apiClient.get(`${CROP_BASE_URL}/user/${id}`);
Â  Â  return response.data;
};

export const createCropRecord = async (data: FormData): Promise<CropRecord> => {
    // Log FormData entries for debugging
    for (let [key, value] of data.entries()) {
      console.log(key, value);
    }
Â  Â  const response = await apiClient.post(CROP_BASE_URL, data);
Â  Â      return response.data;
};

export const getCropRecordById = async (id: string): Promise<CropRecord> => {
Â  Â  const response = await apiClient.get(`${CROP_BASE_URL}/${id}`);
Â  Â  return response.data;
};

export const updateCropRecord = async (
Â  Â  id: string,
Â  Â  data: FormData | UpdateCropPayload
): Promise<CropRecord> => {
Â  Â  const response = await apiClient.put(`${CROP_BASE_URL}/${id}`, data);
Â  Â  return response.data;
};

export const deleteCropRecord = async (id: string): Promise<ApiResponse> => {
Â  Â  const response = await apiClient.delete(`${CROP_BASE_URL}/${id}`);
Â  Â  return response.data;
};

export const addCropImages = async (
Â  Â  id: string,
Â  Â  data: FormData
): Promise<ImageResponse> => {
Â  Â  const response = await apiClient.post(`${CROP_BASE_URL}/${id}/images`, data, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  "Content-Type": "multipart/form-data",
Â  Â  Â  Â  },
Â  Â  });
Â  Â  return response.data;
};

export const deleteCropImages = async (
Â  Â  id: string,
Â  Â  fileIds: string[]
): Promise<ApiResponse> => {
Â  Â  const response = await apiClient.delete(`${CROP_BASE_URL}/${id}/images`, {
Â  Â  Â  Â  data: { fileIds },
Â  Â  });
Â  Â  return response.data;
};

// --- Livestock Record API Functions (ALL EXPORTED) ---

export const getLivestockRecords = async (id: string): Promise<LivestockRecord[]> => {
Â  Â  const response = await apiClient.get(`${LIVESTOCK_BASE_URL}/user/${id}`);
Â  Â  return response.data;
};

export const createLivestockRecord = async (
Â  Â  data: FormData
): Promise<LivestockRecord> => {
Â  Â  const response = await apiClient.post(LIVESTOCK_BASE_URL, data);
Â  Â      return response.data;};

export const getLivestockRecordById = async (
Â  Â  id: string
): Promise<LivestockRecord> => {
Â  Â  const response = await apiClient.get(`${LIVESTOCK_BASE_URL}/${id}`);
Â  Â  return response.data;
};

export const updateLivestockRecord = async (
Â  Â  id: string,
Â  Â  data: FormData | UpdateLivestockPayload
): Promise<LivestockRecord> => {
Â  Â  const response = await apiClient.put(`${LIVESTOCK_BASE_URL}/${id}`, data);
Â  Â  return response.data;
};

export const deleteLivestockRecord = async (id: string): Promise<ApiResponse> => {
Â  Â  const response = await apiClient.delete(`${LIVESTOCK_BASE_URL}/${id}`);
Â  Â  return response.data;
};

export const addLivestockImages = async (
Â  Â  id: string,
Â  Â  data: FormData
): Promise<ImageResponse> => {
Â  Â  const response = await apiClient.post(
Â  Â  Â  Â  `${LIVESTOCK_BASE_URL}/${id}/images`,
Â  Â  Â  Â  data,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  "Content-Type": "multipart/form-data",
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  }
Â  Â  );
Â  Â  return response.data;
};

export const deleteLivestockImages = async (
Â  Â  id: string,
Â  Â  fileIds: string[]
): Promise<ApiResponse> => {
Â  Â  const response = await apiClient.delete(
Â  Â  Â  Â  `${LIVESTOCK_BASE_URL}/${id}/images`,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  data: { fileIds },
Â  Â  Â  Â  }
Â  Â  );
Â  Â  return response.data;
};