import apiClient, { API_URL } from "../api/farmoperation";

const BASE_URL = `${API_URL}/api/task-planner`;

export interface Task {
  id: string; // Required
  title: string;
  status?: string;
  priority?: string;
  timeline?: {
    dueDate?: string;
    dueTime?: string;
  };
  createdTime?: string;
  note?: string;
  attachment?: unknown;
  taskType: string;
  assignee: string;
  entity_id: string;
}

// 1. TaskCreationPayload: Used for POST /api/task-planner
// It omits properties generated by the server (id, createdTime).
export type TaskCreationPayload = Omit<Task, 'id' | 'createdTime'>;

// 2. TaskUpdatePayload: Used for PUT /api/task-planner/{id}
// It should contain the 'id' if the API requires it in the body, but since your
// 'updateTask' function takes 'TaskCreationData' (which includes 'id'), we'll rename 
// your original type for clarity, though TaskUpdatePayload is usually Partial<Task>.
export type TaskUpdatePayload = TaskCreationPayload & { id: string };

// --- API Functions ---

// Fetches all tasks from the API using apiClient.
export const getTasks = async (id: string): Promise<Task[]> => {
  const response = await apiClient.get(`${BASE_URL}/assignee/${id}`);
  return response.data;
};

// Creates a new task using apiClient.
// FIX: Use the new TaskCreationPayload which correctly omits 'id'.
export const createTask = async (taskData: TaskCreationPayload): Promise<Task> => {
  const response = await apiClient.post(BASE_URL, taskData);
  return response.data;
};

// Updates an existing task by its ID using apiClient.
// The payload here should contain the fields to update.
// We use Partial<TaskCreationPayload> to allow sending only the changed fields,
// which is standard for PUT/PATCH updates.
export const updateTask = async (id: string, taskData: Partial<TaskCreationPayload>): Promise<Task> => {
  const response = await apiClient.put(`${BASE_URL}/${id}`, taskData);
  return response.data;
};

// Deletes a task by its ID using apiClient.
export const deleteTask = async (id: string): Promise<{ message: string }> => {
  const response = await apiClient.delete(`${BASE_URL}/${id}`);
  return response.data;
};